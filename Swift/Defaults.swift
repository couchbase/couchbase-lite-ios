//
//  Defaults.swift
//  CouchbaseLite
//
//  Copyright (c) 2022-present Couchbase, Inc All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO
// BE OVERWRITTEN

import Foundation

public struct Defaults {
	/// [false] Plaintext is not used, and instead binary encoding is used in log files
	public static let defaultLogFileUsePlainText: Bool = kCBLDefaultLogFileUsePlainText.boolValue

	/// [524288] 512 KiB for the size of a log file
	public static let defaultLogFileMaxSize: UInt64 = kCBLDefaultLogFileMaxSize

	/// [1] 1 rotated file present (2 total, including the currently active log file)
	public static let defaultLogFileMaxRotateCount: Int = kCBLDefaultLogFileMaxRotateCount

	/// [false] Accents and ligatures are not ignored when indexing via full text search
	public static let defaultFullTextIndexIgnoreAccents: Bool = kCBLDefaultFullTextIndexIgnoreAccents.boolValue

	/// [ReplicatorType.pushAndPull] Perform bidirectional replication
	public static let defaultReplicatorType: ReplicatorType = ReplicatorType.pushAndPull

	/// [false] One-shot replication is used, and will stop once all initial changes are processed
	public static let defaultReplicatorContinuous: Bool = kCBLDefaultReplicatorContinuous.boolValue

	/// [false] Replication stops when an application enters background mode
	public static let defaultReplicatorAllowReplicatingInBackground: Bool = kCBLDefaultReplicatorAllowReplicatingInBackground.boolValue

	/// [300seconds] A heartbeat messages is sent every 300 seconds to keep the connection alive
	public static let defaultReplicatorHeartbeat: TimeInterval = kCBLDefaultReplicatorHeartbeat

	/// [9] When replicator is not continuous, after 9 failed attempts give up on the replication
	public static let defaultReplicatorMaxAttemptsSingleShot: UInt = kCBLDefaultReplicatorMaxAttemptsSingleShot

	/// [UInt.max] When replicator is continuous, never give up unless explicitly stopped
	public static let defaultReplicatorMaxAttemptsContinuous: UInt = kCBLDefaultReplicatorMaxAttemptsContinuous

	/// [300seconds] One-shot replication is used, and will stop once all initial changes are processed
	public static let defaultReplicatorMaxAttemptWaitTime: TimeInterval = kCBLDefaultReplicatorMaxAttemptWaitTime

	/// [true] Purge documents when a user loses access
	public static let defaultReplicatorEnableAutoPurge: Bool = kCBLDefaultReplicatorEnableAutoPurge.boolValue

	/// [0] No port specified, the OS will assign one
	public static let defaultListenerPort: UInt16 = kCBLDefaultListenerPort

	/// [false] TLS is enabled on the connection
	public static let defaultListenerDisableTls: Bool = kCBLDefaultListenerDisableTls.boolValue

	/// [false] The listener will allow database writes
	public static let defaultListenerReadOnly: Bool = kCBLDefaultListenerReadOnly.boolValue

	/// [false] Delta sync is disabled for the listener
	public static let defaultListenerEnableDeltaSync: Bool = kCBLDefaultListenerEnableDeltaSync.boolValue


}
