//
//  CBLReplicatorConfiguration.m
//  CouchbaseLite
//
//  Created by Pasin Suriyentrakorn on 5/25/17.
//  Copyright Â© 2017 Couchbase. All rights reserved.
//

#import "CBLReplicatorConfiguration.h"
#import "CBLAuthenticator+Internal.h"
#import "CBLReplicator+Internal.h"
#import "CBLDatabase+Internal.h"

#if TARGET_OS_IPHONE
#import <UIKit/UIKit.h>
#endif

#import "repo_version.h"    // Generated by get_repo_version.sh at build time

@interface CBLReplicatorConfigurationBuilder()

- (instancetype) initWithDatabase: (CBLDatabase*)database
                           target: (id<CBLEndpoint>)target;

- (instancetype) initWithConfig: (CBLReplicatorConfiguration*)config;

@end

@implementation CBLReplicatorConfigurationBuilder

@synthesize database=_database, target=_target;
@synthesize replicatorType=_replicatorType, continuous=_continuous;
@synthesize conflictResolver=_conflictResolver;
@synthesize authenticator=_authenticator;
@synthesize pinnedServerCertificate=_pinnedServerCertificate;
@synthesize headers=_headers;
@synthesize documentIDs=_documentIDs, channels=_channels;

- (instancetype) initWithDatabase: (CBLDatabase*)database
                           target: (id<CBLEndpoint>)target
{
    self = [super init];
    if (self) {
        _database = database;
        _target = target;
        _replicatorType = kCBLReplicatorPushAndPull;
    }
    return self;
}


- (instancetype) initWithConfig: (CBLReplicatorConfiguration*)config {
    self = [super init];
    if (self) {
        _database = config.database;
        _target = config.target;
        _replicatorType = config.replicatorType;
        _continuous = config.continuous;
        _conflictResolver = config.conflictResolver;
        _authenticator = config.authenticator;
        _pinnedServerCertificate = config.pinnedServerCertificate;
        _headers = config.headers;
        _documentIDs = config.documentIDs;
        _channels = config.channels;
    }
    return self;
}


- (id<CBLConflictResolver>) conflictResolver {
    if (!_conflictResolver)
        _conflictResolver = [[CBLDefaultConflictResolver alloc] init];
    return _conflictResolver;
}

@end


@implementation CBLReplicatorConfiguration

@synthesize database=_database, target=_target;
@synthesize replicatorType=_replicatorType, continuous=_continuous;
@synthesize conflictResolver=_conflictResolver;
@synthesize authenticator=_authenticator;
@synthesize pinnedServerCertificate=_pinnedServerCertificate;
@synthesize headers=_headers;
@synthesize documentIDs=_documentIDs, channels=_channels;
@synthesize checkpointInterval=_checkpointInterval;


- (instancetype) initWithDatabase: (CBLDatabase*)database
                           target: (id <CBLEndpoint>)target
{
    return [self initWithDatabase: database target: target block: nil];
}


- (instancetype) initWithDatabase: (CBLDatabase*)database
                           target: (id <CBLEndpoint>)target
                            block: (nullable void(^)(CBLReplicatorConfigurationBuilder* builder))block
{
    self = [super init];
    if (self) {
        CBLReplicatorConfigurationBuilder* builder =
            [[CBLReplicatorConfigurationBuilder alloc] initWithDatabase: database
                                                                 target: target];
        if (block)
            block(builder);
        
        [self initializeWithBuilder: builder];
    }
    return self;
}


- (instancetype) initWithConfig: (CBLReplicatorConfiguration*)config
                          block: (nullable void(^)(CBLReplicatorConfigurationBuilder* builder))block
{
    self = [super init];
    if (self) {
        CBLReplicatorConfigurationBuilder* builder =
            [[CBLReplicatorConfigurationBuilder alloc] initWithConfig: config];
        
        if (block)
            block(builder);
        
        [self initializeWithBuilder: builder];
    }
    return self;
}


- (void) initializeWithBuilder: (CBLReplicatorConfigurationBuilder*)builder {
    _database = builder.database;
    _target = builder.target;
    _replicatorType = builder.replicatorType;
    _continuous = builder.continuous;
    _conflictResolver = builder.conflictResolver;
    _authenticator = builder.authenticator;
    _pinnedServerCertificate = builder.pinnedServerCertificate;
    _headers = builder.headers;
    _documentIDs = builder.documentIDs;
    _channels = builder.channels;
}


- (NSDictionary*) effectiveOptions {
    NSMutableDictionary* options = [NSMutableDictionary dictionary];
    
    // Add authentication info if any:
    [_authenticator authenticate: options];
    
    // Add the pinned certificate if any:
    if (_pinnedServerCertificate) {
        NSData* certData = CFBridgingRelease(SecCertificateCopyData(_pinnedServerCertificate));
        options[@kC4ReplicatorOptionPinnedServerCert] = certData;
    }
    
    // User-Agent and HTTP headers:
    NSMutableDictionary* httpHeaders = [NSMutableDictionary dictionary];
    httpHeaders[@"User-Agent"] = [self.class userAgentHeader];
    if (self.headers)
        [httpHeaders addEntriesFromDictionary: self.headers];
    options[@kC4ReplicatorOptionExtraHeaders] = httpHeaders;

    // Filters:
    options[@kC4ReplicatorOptionDocIDs] = _documentIDs;
    options[@kC4ReplicatorOptionChannels] = _channels;

    // Checkpoint Interval (no public api now):
    if (_checkpointInterval > 0)
        options[@kC4ReplicatorCheckpointInterval] = @(_checkpointInterval);
    
    return options;
}


+ (NSString*) userAgentHeader {
    static NSString* sUserAgent;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
#if TARGET_OS_IPHONE
        UIDevice* device = [UIDevice currentDevice];
        NSString* system = [NSString stringWithFormat: @"%@ %@; %@",
                            device.systemName, device.systemVersion, device.model];
#else
        NSOperatingSystemVersion v = [[NSProcessInfo processInfo] operatingSystemVersion];
        NSString* version = [NSString stringWithFormat:@"%ld.%ld.%ld",
                                   v.majorVersion, v.minorVersion, v.patchVersion];
        NSString* system = [NSString stringWithFormat: @"macOS %@", version];
#endif
        NSString* platform = strcmp(CBL_PRODUCT_NAME, "CouchbaseLiteSwift") == 0 ?
            @"Swift" : @"ObjC";
        
        NSString* commit = strlen(GitCommit) > (0) ?
            [NSString stringWithFormat: @"Commit/%.8s%s", GitCommit, GitDirty] : @"NA";
        
        sUserAgent = [NSString stringWithFormat: @"CouchbaseLite/%s (%@; %@) Build/%d %@",
                      CBL_VERSION_STRING, platform, system, CBL_BUILD_NUMBER, commit];
    });
    return sUserAgent;
}

@end
